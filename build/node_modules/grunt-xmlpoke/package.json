{
  "name": "grunt-xmlpoke",
  "description": "Updates values in XML files based on XPath queries",
  "version": "0.8.0",
  "homepage": "https://github.com/bdukes/grunt-xmlpoke",
  "author": {
    "name": "Brian Dukes",
    "email": "bdukes@engagesoftware.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bdukes/grunt-xmlpoke.git"
  },
  "bugs": {
    "url": "https://github.com/bdukes/grunt-xmlpoke/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/bdukes/grunt-xmlpoke/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.2"
  },
  "keywords": [
    "gruntplugin",
    "xml"
  ],
  "dependencies": {
    "xpath": "0.0.6",
    "xmldom": "~0.1.16",
    "lodash": "2.4.1"
  },
  "readme": "# grunt-xmlpoke\r\n\r\n> Updates values in XML files based on XPath queries.  Similar to the `xmlpoke` task in NAnt.\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.2`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-xmlpoke --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-xmlpoke');\r\n```\r\n\r\n## The \"xmlpoke\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `xmlpoke` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  xmlpoke: {\r\n    updateTitle: {\r\n      options: {\r\n        xpath: '//title',\r\n        value: 'The Good Parts'\r\n      },\r\n      files: {\r\n        'dest.xml': 'src.xml'\r\n      },\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.xpath\r\nType: `String`\r\nDefault value: `''`\r\n\r\nAn xpath query to select one or more nodes in the source document.\r\n\r\n#### options.value\r\nType: `String` or `Function`\r\nDefault value: `''`\r\n\r\nA string value to which the value of any matched node is set.\r\n\r\nYou can also supply a function that returns the replacement value.  The first\r\nargument supplied to the function will be the node on which the replacement is \r\nbeing made.\r\n\r\n#### options.namespaces\r\nType: `object`\r\nDefault value: `{}`\r\n\r\nAn object mapping between XML namespace prefixes and names (URIs).  \r\nFor example, `{ 'em': 'http://example.org/XML/em' }`\r\n\r\n#### options.valueType\r\nType: `String`\r\nDefault value: `'text'`\r\n\r\nThe text content of the node(s) will be set using **options.value**.\r\n\r\nSetting to `'element'` will replace the value of the node(s) with raw xml element(s) as defined in **options.value**.\r\nSetting to `'append'` will append the raw xml element(s) as defined in **options.value** to the end of the selected node(s).\r\nSetting to `'remove'` will remove the node(s) from the xml (**options.value** is ignored).\r\n\r\n#### options.replacements\r\nType: `Array`\r\nDefault value: `undefined`\r\n\r\nAn array of replacement options (i.e. objects with `xpath` and `value` properties)\r\n\r\n### Usage Examples\r\n\r\n#### Basic Usage\r\nIn this example, the text content of an element is set to a static value. So if the `testing.xml` file has the content `<abc></abd>`, the generated result would be `<abc>123</abc>`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  setTheNumber: {\r\n    xmlpoke: {\r\n      options: {\r\n        xpath: '/abc',\r\n        value: '123'\r\n      },\r\n      files: {\r\n        'dest/basic_usage.xml': 'src/testing.xml',\r\n      },\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n#### Attribute Example\r\nIn this example, the value of an attribute is cleared. So if the `testing.xml` file has the content `<x y=\"999\" />`, the generated result in this case would be `<x y=\"\" />`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  xmlpoke: {\r\n    updateAnAttribute: {\r\n      options: {\r\n        xpath: '/x/@y',\r\n        value: ''\r\n      },\r\n      files: {\r\n        'dest/attribute_example.xml': 'src/testing.xml',\r\n      },\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n#### Element Example\r\nIn this example, an element is set as the child of an other element. So if the `testing.xml` file has the content `<x><y /></x>`, the generated result in this case would be `<x><z /></x>`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  xmlpoke: {\r\n    updateAnAttribute: {\r\n      options: {\r\n        xpath: '/x',\r\n        value: '<z />',\r\n        valueType: 'element'\r\n      },\r\n      files: {\r\n        'dest/element_example.xml': 'src/testing.xml',\r\n      },\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n#### Append Example\r\nIn this example, an element is added to another element. So if the `testing.xml` file has the content `<x><y /></x>`, the generated result in this case would be `<x><y /><z /></x>`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  xmlpoke: {\r\n    updateAnAttribute: {\r\n      options: {\r\n        xpath: '/x',\r\n        value: '<z />',\r\n        valueType: 'append'\r\n      },\r\n      files: {\r\n        'dest/append_example.xml': 'src/testing.xml',\r\n      },\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n#### Function Example\r\nIn this example, the value of an attribute is modified. So if the `testing.xml` file has the content `<x y=\"abc\" />`, the generated result in this case would be `<x y=\"ABC\" />`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  xmlpoke: {\r\n    upperCaseTheY: {\r\n      options: {\r\n        xpath: '/x/@y',\r\n        value: function (node) { return node.value.toUpperCase(); }\r\n      },\r\n      files: {\r\n        'dest/function_example.xml': 'src/testing.xml',\r\n      },\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n#### Multiple XPath Queries\r\nIn this example, the same value is put intp multiple locations. So if the `testing.xml` file has the content `<x y=\"999\" />`, the generated result in this case would be `<x y=\"111\">111</x>`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  xmlpoke: {\r\n    updateAllTheThings: {\r\n      options: {\r\n        xpath: ['/x/@y','/x'],\r\n        value: '111'\r\n      },\r\n      files: {\r\n        'dest/multiple_xpath_queries.xml': 'src/testing.xml',\r\n      },\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n#### Multiple Replacements\r\nIn this example, multiple replacements take place at once. So if the `testing.xml` file has the content `<x y=\"999\" />`, the generated result in this case would be `<x y=\"111\">M</x>`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  xmlpoke: {\r\n    updateACoupleOfThings: {\r\n      options: {\r\n        replacements: [{\r\n          xpath: '/x/@y',\r\n          value: '111'\r\n        }, {\r\n          xpath: '/x',\r\n          value: 'M'\r\n        }]\r\n      },\r\n      files: {\r\n        'dest/multiple_replacements.xml': 'src/testing.xml',\r\n      },\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n#### Fail On Missing XPath\r\nBy default, if the providex XPath expression doesn't match any nodes, the task will silently continue.\r\nYou can override this behavior by specifying `failIfMissing` in the `options` (either at the top level of the task, or in a sub-task),\r\nor within a single replacement.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  xmlpoke: {\r\n    options: {\r\n      failIfMissing: true\r\n    },\r\n    updateACoupleOfThings: {\r\n      options: {\r\n        replacements: [{\r\n          xpath: '/x/@y',\r\n          value: '111',\r\n          failIfMissing: false\r\n        }, {\r\n          xpath: '/x',\r\n          value: 'M'\r\n        }]\r\n      },\r\n      files: {\r\n        'dest/element_required_attribute_optional.xml': 'src/testing.xml',\r\n      },\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n - 0.1.0 &mdash; Initial release\r\n - 0.2.0 &mdash; Multiple replacements at once\r\n - 0.2.1 &mdash; Color filename when logged\r\n - 0.3.0 &mdash; Allow specifying replacement value as a function (Thanks [@dimasty](https://github.com/dimasty)!)\r\n - 0.4.0 &mdash; Allow specifying namespaces (Thanks [@j1mmie](https://github.com/j1mmie)!)\r\n - 0.5.0 &mdash; Allow replacing with XML elements, not just text (Thanks [@kraihn](https://github.com/kraihn)!)\r\n - 0.6.0 &mdash; Allow removing XML elements (Thanks [@mradcliffe](https://github.com/mradcliffe)!)\r\n - 0.7.0 &mdash; Allow appending XML elements (Thanks [@njtman](https://github.com/njtman)!)\r\n - 0.8.0 &mdash; Add option to fail if XPath expression doesn't match any nodes (Thanks [@omatrycy](https://github.com/omatrycy)!)\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-xmlpoke@0.8.0",
  "_from": "grunt-xmlpoke@^0.8.0"
}
